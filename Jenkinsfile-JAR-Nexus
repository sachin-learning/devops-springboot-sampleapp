pipeline {
    agent any

    tools {
	    maven "Maven3"
	    jdk "OpenJDK17"
	}
    
    stages {
        stage('Fetch Code') {
            steps {
                git branch: 'main', url: 'https://github.com/sachin-learning/devops-springboot-sampleapp.git'
            }
        }
        
        stage('Build with Maven Install') {
            steps {
                sh 'mvn clean install'
            }
        }
        
        stage('Archive Artifact') {
            steps {
                archiveArtifacts '**/*.jar' // Change the file extension according to your artifact type
            }
        }
        
        stage('Run Maven Tests') {
            steps {
                sh 'mvn test'
            }
        }
        
        stage('Checkstyle Analysis') {
            steps {
                sh 'mvn checkstyle:checkstyle'
                // Alternatively, you can use a Checkstyle plugin to parse the results and display them in Jenkins UI
            }
        }

        stage('SonarQube Scan') {
            environment {
                scannerHome = tool 'SonarQube'
                sonarqubeServer = 'sonarqube-local'
            }
            steps {
                withSonarQubeEnv("${sonarqubeServer}") {
                    sh '''
                        ${scannerHome}/bin/sonar-scanner \
                        -Dsonar.projectKey=sampleapp \
                        -Dsonar.projectName=sampleapp \
                        -Dsonar.projectVersion=1.0 \
                        -Dsonar.sources=src/ \
                        -Dsonar.java.binaries=target/test-classes/com/sachin/learning/sample1 \
                        -Dsonar.junit.reportPaths=target/surefire-reports \
                        -Dsonar.checkstyle.reportPaths=target/checkstyle-result.xml
                    '''
                }
            }
        }

        stage('Quality Gate') {
            steps {
                timeout(time: 1, unit: 'HOURS') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }

        stage('Upload Artifacts to Nexus Repository') {
            steps {
                nexusArtifactUploader(
                    nexusVersion: 'nexus3',
                    protocol: 'http',
                    nexusUrl: '192.168.201.5:8081',
                    groupId: 'QA',
                    version: "${env.BUILD_ID}-${env.BUILD_TIMESTAMP}",
                    repository: 'spampleapp-repo',
                    credentialsId: 'Nexus-Local',
                    artifacts: [
                        [
                            artifactId: 'springboot-sampleapp', 
                            file: 'target/springboot-sampleapp-0.0.1-SNAPSHOT.jar',
                            type: 'jar'
                        ] // Change the file path according to your artifact type
                    ]
                )
            }
        }
    }
}